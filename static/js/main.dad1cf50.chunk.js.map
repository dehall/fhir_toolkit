{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mkFhir","require","supportedResourceTypes","localStorage","window","Tablifier","props","keys","length","header","map","k","scope","key","body","data","o","i","App","setStateAndLocalStorage","state","console","log","setState","Object","entries","value","setItem","applyServerSettings","client","baseUrl","fields","trim","headers","undefined","headerCount","keyFieldId","valueFieldId","keyField","valueField","fetch","then","conformance","json","_reason","addHeader","removeHeader","Math","max","addSearchCriteria","searchCriteriaCount","removeSearchCriteria","performSearch","query","search","type","result","searchResult","err","selectPatientAction","patientId","queryPatientDetails","queries","resourceType","patient","push","Promise","all","responses","fakeBundle","entry","r","flat","getItem","Number","id","element","this","htmlFor","name","defaultValue","ref","setRefFn","patientSearchParams","options","rest","resource","find","searchParam","criteria","line","createDropdown","list","nameObj","family","given","birthDate","onClick","allResources","e","resourcesByType","reduce","rv","x","successImg","src","style","height","serverSettingsTitle","patientSearchTitle","className","trigger","open","renderHeaderFields","renderSearchCriteria","renderSearchResults","renderPatientDetails","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dad1cf50.chunk.js","sourcesContent":["import React from 'react';\nimport Collapsible from 'react-collapsible';\nimport './App.css';\n\nvar mkFhir = require('fhir.js');\n\nconst supportedResourceTypes = ['Condition', 'Observation', 'Procedure'];\n\nconst localStorage = window.localStorage;\n\n// https://stackoverflow.com/a/34890276\nconst groupBy = function(xs, key) {\n  return xs.reduce(function(rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nconst Tablifier = (props) => {\n  // props.keys = array\n  if (!props || !props.keys || props.keys.length === 0) return null;\n\n  const header = props.keys.map(k => <th scope=\"col\" key={k}>{ k }</th>);\n  const body = props.data.map((o,i) => <tr key={i}>{ props.keys.map(k => <td key={k}>{ o[k] }</td>) }</tr>);\n\n  return (\n    <table>\n      <thead><tr>{ header }</tr></thead>\n      <tbody>{ body }</tbody>\n    </table>);\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fields = {};\n\n    this.state = {\n      ...localStorage,\n\n      // manually overridden from localStorage\n      client: null,\n      baseUrl: localStorage.getItem('baseUrl'),\n      headerCount: Number(localStorage.getItem('headerCount')) || 0,\n      searchCriteriaCount: Number(localStorage.getItem('searchCriteriaCount')) || 1\n    };\n\n    if (this.state.baseUrl) {}\n  }\n\n  setStateAndLocalStorage = (state) => {\n    console.log(state);\n    this.setState(state);\n    for (let [key, value] of Object.entries(state)) {\n      localStorage.setItem(key, value);\n    }\n  }\n\n  applyServerSettings = () => {\n    this.setState({ client: null });\n    const baseUrl = this.fields['baseUrl'].value;\n\n    if (!baseUrl || !baseUrl.trim()) return;\n\n    localStorage.setItem('baseUrl', baseUrl);\n\n    let headers = undefined;\n    if (this.state.headerCount > 0) {\n      headers = {};\n      for (let i = 0; i < this.state.headerCount; i++) {\n        const keyFieldId = `header_${i}_key`;\n        const valueFieldId = `header_${i}_value`;\n\n        const keyField = this.fields[keyFieldId];\n        const valueField = this.fields[valueFieldId];\n\n        if (keyField && valueField) {\n          const key = keyField.value;\n          const value = valueField.value;\n\n          if (key && value) {\n            headers[key] = value;\n            localStorage.setItem(keyFieldId, key);\n            localStorage.setItem(valueFieldId, value);\n          }\n        }\n      }\n    }\n\n    fetch(`${baseUrl}/metadata`)\n      .then(conformance => conformance.json(),\n            _reason => { /* TODO: handle bad server */ } )\n      .then(conformance => {\n          const client = mkFhir({ baseUrl, headers });\n          this.setStateAndLocalStorage({ client, conformance });\n      });\n  }\n\n  addHeader = () => {\n    const headerCount = this.state.headerCount + 1;\n    this.setStateAndLocalStorage({ headerCount });\n  }\n  removeHeader = () => {\n    const headerCount = Math.max(0, this.state.headerCount - 1);\n    this.setStateAndLocalStorage({ headerCount });\n  }\n\n  addSearchCriteria = () => {\n    const searchCriteriaCount = this.state.searchCriteriaCount + 1;\n    this.setStateAndLocalStorage({ searchCriteriaCount });\n  }\n  removeSearchCriteria = () => {\n    const searchCriteriaCount = Math.max(1, this.state.searchCriteriaCount - 1);\n    this.setStateAndLocalStorage({ searchCriteriaCount });\n  }\n\n  setRefFn(id) {\n    return (element) => this.fields[id] = element;\n  } \n\n  renderHeaderFields() {\n    const fields = [];\n\n    for (let i = 0; i < this.state.headerCount; i++) {\n      const id = `header_${i}`\n      const key = `${id}_key`;\n      const value = `${id}_value`;\n      fields.push(\n        <div key={id}>\n          <label htmlFor={key}>Key</label><input type=\"text\" name={key} defaultValue={this.state[key]} ref={this.setRefFn(key)}/>\n          <label htmlFor={value}>Value</label><input type=\"text\" name={value} defaultValue={this.state[value]} ref={this.setRefFn(value)}/>\n          <br/>\n        </div>);\n    }\n\n    return fields;\n  }\n\n  createDropdown(patientSearchParams, key) {\n    const options = [];\n    options.push(<option key=\"_\" value=\"\"></option>);\n    for (const searchParam of patientSearchParams) {\n      const name = searchParam.name;\n      options.push(<option key={name} value={name}>{name}</option>);\n    }\n\n    return (<select id={key} ref={this.setRefFn(key)}> { options } </select>);\n  }\n\n  renderSearchCriteria(conformance) {\n    if (!conformance\n      || !conformance.rest\n      || !conformance.rest[0]) return null;\n\n    const patientSearchParams = conformance.rest[0].resource.find(r => r.type === \"Patient\").searchParam;\n\n    const criteria = [];\n\n    for (let i = 0 ; i < this.state.searchCriteriaCount ; i++) {\n      const id = `criteria_${i}`\n      const key = `${id}_key`;\n      const value = `${id}_value`;\n      const line = (<div key={i}>\n          { this.createDropdown(patientSearchParams, key) }\n          =  \n          <input type=\"text\" name={value} ref={this.setRefFn(value)}/>\n          <br/>\n        </div>);\n\n      criteria.push( line );\n    }\n\n    return criteria;\n  }\n\n  performSearch = () => {\n    const query = {};\n    if (this.state.searchCriteriaCount > 0) {\n      for (let i = 0; i < this.state.searchCriteriaCount; i++) {\n        const keyFieldId = `criteria_${i}_key`;\n        const valueFieldId = `criteria_${i}_value`;\n\n        const keyField = this.fields[keyFieldId];\n        const valueField = this.fields[valueFieldId];\n\n        if (keyField && valueField) {\n          const key = keyField.value;\n          const value = valueField.value;\n\n          if (key && value) {\n            query[key] = value;\n            localStorage.setItem(keyFieldId, key);\n            localStorage.setItem(valueFieldId, value);\n          }\n        }\n      }\n    }\n\n    this.state.client\n      .search( { type: 'Patient', query })\n      .then(result => this.setState({ searchResult: result.data }), err => console.log(err));\n  }\n\n  renderSearchResults(result) {\n    // debugger;\n    if (!result || !result.entry) return null;\n\n    const list = [];\n    for (const entry of result.entry) {\n      const resource = entry.resource;\n      const nameObj = resource.name[0];\n      const name = `${nameObj.family}, ${nameObj.given[0]}`;\n      list.push(<tr key={resource.id}>\n          <td>{resource.id}</td>\n          <td>{name}</td>\n          <td>{resource.birthDate}</td>\n          <td><button onClick={this.selectPatientAction(resource.id)}>Select</button></td>\n        </tr>);\n    }\n    return (<table>\n      <thead>\n      <tr>\n        <th scope=\"col\">ID</th><th scope=\"col\">Name</th><th scope=\"col\">Birthdate</th><th>Select</th>\n      </tr>\n      </thead>\n      <tbody>\n      { list }\n      </tbody>\n      </table>);\n  }\n\n  selectPatientAction = (patientId) => {\n    return () => {\n      this.setState({ patientId });\n      this.queryPatientDetails(patientId);\n    };\n  }\n\n  queryPatientDetails = (patientId) => {\n    const queries = [];\n\n    for (const resourceType of supportedResourceTypes) {\n      console.log('starting query for ' + resourceType);\n      const query = this.state.client.search({type: resourceType, query: { patient: patientId }});\n      queries.push(query);\n    }\n\n    Promise.all(queries).then(responses => {\n      const allEntries = responses.map(r => r.data.entry).flat();\n\n      const fakeBundle = {\n        resourceType: 'Bundle',\n        entry: allEntries\n      };\n\n      this.setState({ patient: fakeBundle });\n    });\n  }\n\n  renderPatientDetails(patient) {\n    if (!patient) return;\n\n    const allResources = patient.entry.map(e => e.resource);\n\n    const resourcesByType = groupBy(allResources, 'resourceType');\n\n    return (\n      <div>\n        Conditions<br/>\n        <Tablifier keys={['resourceType', 'id']} data={resourcesByType['Condition']} /><br/>\n        Observations<br/>\n        <Tablifier keys={['resourceType', 'id']} data={resourcesByType['Observation']} /><br/>\n      </div>);\n  }\n\n  render() {\n    const successImg = (<img src=\"success.png\" style={{ height: '20px' }}/>);\n    const serverSettingsTitle = (<div>\n      Server Settings\n      { this.state.client && successImg }\n      </div>);\n    const patientSearchTitle = (<div>\n      Patient Search\n      { this.state.patient && successImg }\n      </div>);\n    return (\n      <div className=\"App\">\n        <Collapsible trigger={serverSettingsTitle} open={!this.state.client}>\n          <label htmlFor=\"baseUrl\">Base URL:</label>\n          <input type=\"text\" name=\"baseUrl\" id=\"baseUrl\" defaultValue={this.state.baseUrl} ref={this.setRefFn('baseUrl')}/>\n          <br/><br/>\n          <label>Request Headers</label><br/>\n          { this.renderHeaderFields() }\n          <button onClick={this.addHeader}>+</button><button onClick={this.removeHeader}>-</button>\n          <br/>\n          <button onClick={this.applyServerSettings}>Apply and Connect</button>\n        </Collapsible>\n        <Collapsible trigger={patientSearchTitle} open={!!this.state.client && !this.state.patientId}>\n          { this.renderSearchCriteria(this.state.conformance) }\n          <button onClick={this.addSearchCriteria}>+</button><button onClick={this.removeSearchCriteria}>-</button>\n          <br/><br/>\n          <button onClick={this.performSearch}>Search</button>\n          { this.renderSearchResults(this.state.searchResult) }\n        </Collapsible>\n        <Collapsible trigger=\"Patient Details\" open={!!this.state.patientId}>\n          { this.renderPatientDetails(this.state.patient) }\n        </Collapsible>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}